buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE")
        classpath("org.cloudfoundry:cf-gradle-plugin:1.1.3")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: 'cloudfoundry'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = 'user-signup-service'
    version ='0.1.0'
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.6.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '1.5.6.RELEASE'
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.6.RELEASE'
    testCompile group: 'com.h2database', name: 'h2', version: '1.3.148'
    testCompile group: 'com.google.code.gson', name: 'gson', version: '2.7'
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['com.emc.lean.signup*']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1
            }

            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1
            }

            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
    }
}

task copyJarToArtifacts(type: Copy) {
    from jar
    into file("${projectDir}/artifacts")
}

cloudfoundry {
    target = "https://api.run.pivotal.io"
    space = "development"
    application = "user-singup"
    file = file("artifacts/user-signup-service-0.1.0.jar")
    uri = "user-singup.cfapps.io"
    memory = 1024
    instances = 1

    services {
        'my-sql' {
            label = 'cleardb'
            plan = 'spark'
            bind = true
        }
    }
}

check.dependsOn([jacocoTestReport, jacocoTestCoverageVerification, copyJarToArtifacts])
