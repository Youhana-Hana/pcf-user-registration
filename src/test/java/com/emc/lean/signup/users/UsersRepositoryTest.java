package com.emc.lean.signup.users;

import com.emc.lean.signup.applications.Application;
import com.google.gson.Gson;
import org.assertj.core.util.Lists;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.*;

import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
@DataJpaTest
public class UsersRepositoryTest {

    @Autowired
    TestEntityManager entityManager;

    @Autowired
    UsersRepository usersRepository;

    @Rule
    public ExpectedException expectedEx = ExpectedException.none();

    @Test
    public void getAllUsers() {
        Application application = new Application("Name 2", "uuid 2", "P1", "T2");

        Map<String, String> user_1_attributes = new HashMap<String, String>();
        user_1_attributes.put("message", "This is my message");
        user_1_attributes.put("bank name", "this is my bank name");
        String user_1_attributes_string = new Gson().toJson(user_1_attributes);
        User user_1 = new User("Name 1", "email 1", application, user_1_attributes_string);
        User user_2 = new User("Name 2", "email 2", application, null);

        this.entityManager.persist(application);
        this.entityManager.persist(user_1);
        this.entityManager.persist(user_2);

        Iterable<User> actual = usersRepository.findAll();

        ArrayList<User> users = Lists.newArrayList(actual.iterator());
        assertEquals(2, users.size());

        User result = users.get(0);
        assertEquals("Name 1", result.getName());
        assertEquals("email 1", result.getEmail());
        assertEquals("{\"bank name\":\"this is my bank name\",\"message\":\"This is my message\"}", result.getAttributes());

        result = users.get(1);
        assertEquals("Name 2", result.getName());
        assertEquals("email 2", result.getEmail());
    }

    @Test
    public void autoGeneratedApplicationId() {
        Application application = new Application("Name 2", "uuid 2", "P1", "T2");
        User user_1 = new User("Name 1", "email 1", application, null);
        User user_2 = new User("Name 2", "email 2", application, null);

        this.entityManager.persist(application);
        this.entityManager.persist(user_1);
        this.entityManager.persist(user_2);

        Iterable<User> actual = usersRepository.findAll();


        ArrayList<User> users = Lists.newArrayList(actual.iterator());
        assertEquals(2, users.size());
        assertNotEquals(0, users.get(0).getId().intValue());
        assertNotEquals(0, users.get(1).getId().intValue());
        assertTrue(users.get(1).getId() > users.get(0).getId());
    }

    @Test
    public void emailisUniqulyIdentifiyingUsers() throws Exception {
        expectedEx.expect(javax.persistence.PersistenceException.class);
        expectedEx.expectMessage("org.hibernate.exception.ConstraintViolationException: could not execute statement");

        Application application = new Application("Name 2", "uuid 2", "P1", "T2");
        User user_1 = new User("Name 1", "email 1", application, null);
        User user_2 = new User("Name 2", "email 1", application, null);

        this.entityManager.persist(application);
        this.entityManager.persist(user_1);
        this.entityManager.persist(user_2);
    }

    @Test
    public void getUsersByApplication() {
        Application application1 = new Application("Name 1", "uuid 1", null, null);
        Application application2 = new Application("Name 2", "uuid 2", "P1", "T2");

        this.entityManager.persistAndGetId(application1);
        this.entityManager.persistAndGetId(application2);

        User user_1 = new User("Name 1", "email 1", application1, null);
        User user_2 = new User("Name 2", "email 2", application2, null);
        User user_3 = new User("Name 3", "email 3", application2, null);

        this.entityManager.persist(application1);
        this.entityManager.persist(application2);
        this.entityManager.persist(user_1);
        this.entityManager.persist(user_2);
        this.entityManager.persist(user_3);

        Page<User> actual = usersRepository.findByApplication(application2, new PageRequest(0, 10));
        ArrayList<User> users = Lists.newArrayList(actual.iterator());
        assertEquals(2, users.size());

        User result = users.get(0);
        assertEquals("Name 2", result.getName());
        assertEquals("email 2", result.getEmail());

        result = users.get(1);
        assertEquals("Name 3", result.getName());
        assertEquals("email 3", result.getEmail());
    }

    @Test
    public void countUsersByApplication() {
        Application application1 = new Application("Name 1", "uuid 1", null, null);
        Application application2 = new Application("Name 2", "uuid 2", "P1", "T2");

        this.entityManager.persist(application1);
        this.entityManager.persist(application2);

        User user_1 = new User("Name 1", "email 1", application1, null);
        User user_2 = new User("Name 2", "email 2", application2, null);
        User user_3 = new User("Name 3", "email 3", application2, null);

        this.entityManager.persist(application1);
        this.entityManager.persist(application2);
        this.entityManager.persist(user_1);
        this.entityManager.persist(user_2);
        this.entityManager.persist(user_3);

        Long count_1 = usersRepository.countByApplication(application1);
        Long count_2 = usersRepository.countByApplication(application2);
        assertEquals(1, count_1.longValue());
        assertEquals(2, count_2.longValue());
    }

    @Test
    public void statsForUsersPerApplication() {
        Application application1 = new Application("Application 1", "uuid 1", null, null);
        Application application2 = new Application("Application 2", "uuid 2", "P1", "T2");

        this.entityManager.persist(application1);
        this.entityManager.persist(application2);

        User user_1 = new User("Name 1", "email 1", application1, null);
        User user_2 = new User("Name 2", "email 2", application2, null);
        User user_3 = new User("Name 3", "email 3", application2, null);

        this.entityManager.persist(application1);
        this.entityManager.persist(application2);
        this.entityManager.persist(user_1);
        this.entityManager.persist(user_2);
        this.entityManager.persist(user_3);

        List<Stats> stats = usersRepository.countPerApplication();
        assertEquals(2, stats.size());

        assertEquals("Application 1", stats.get(0).getName());
        assertEquals("UUID 1", stats.get(0).getUuid());
        assertEquals(1, stats.get(0).getCount());

        assertEquals("Application 2", stats.get(1).getName());
        assertEquals("UUID 2", stats.get(1).getUuid());
        assertEquals(2, stats.get(1).getCount());
    }
}
